#Min Heap
#A min-heap is a collection of nodes. It is one of the heap types.
# There are two sorts of nodes in a min-heap.
# A heap contains two nodes: a parent node, or root node, and a child node.
# A parent or root nodeâ€™s value should always be less than or equal to the value of the child node in the min-heap.
#Here is a Min-Heap program
def Min_heap(A,K):
    L = Left(K)
    R = Right(K)
    if L < len(A) and A[L] < A[K]:
        Smallest = L
    else:
        Smallest = K
    if R < len(A) and A[R] < A[Smallest]:
        Smallest = R
    if Smallest != K:
        A[K], A[Smallest] = A[Smallest], A[K]
        Min_heap(A, Smallest)
def Left(K):
    return 2 * K + 1
def Right(K):
    return 2 * K + 2
def build_in_Min_heap(A):
    N = int((len(A)//2)-1)
    for K in range(N, -1, -1):
        Min_heap(A,K)
A = [13,9,2,1,4,5,11,12,7,20,6]
build_in_Min_heap(A)
print(A)
#Output-
#[1, 4, 2, 7, 6, 5, 11, 12, 9, 20,13]
