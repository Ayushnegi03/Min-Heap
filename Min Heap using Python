#Min Heap
#A min-heap is a collection of nodes. It is one of the heap types.
# There are two sorts of nodes in a min-heap.
# A heap contains two nodes: a parent node, or root node, and a child node.
# A parent or root nodeâ€™s value should always be less than or equal to the value of the child node in the min-heap.
import sys
class Minheap:
    def __init__(self, size):
        self.storage=[0]*size
        self.size = size
        self.heap_size = 0
        self.Heap = [0]*(self.size + 1)
        self.Heap[0] = sys.maxsize * -1
        self.parent = 1
        self.root=1
    def ParentIndex(self,index):
        return (index-1)//2
    def LeftChildIndex(self,index):
        return 2*index+1
    def RightChildIndex(self,index):
        return 2*index+2
    def Parent(self,index):
        return self.ParentIndex(index)>=0
    def insert(self,index):
        if self.heap_size >= self.size :
            return
        self.heap_size+= 1
        self.Heap[self.heap_size] = index
        heap = self.heap_size
        while self.Heap[heap] < self.Heap[heap//2]:
            self.swap(heap, heap//2)
            heap = heap//2
    def swap(self, left, right):
        self.Heap[left], self.Heap[right] = self.Heap[right], self.Heap[left]
    def root_node(self, i):
        if not (i >= (self.heap_size//2) and i <= self.heap_size):
            if (self.Heap[i] > self.Heap[2 * i]  or  self.Heap[i] > self.Heap[(2 * i) + 1]):
                if self.Heap[2 * i] < self.Heap[(2 * i) + 1]:
                    self.swap(i, 2 * i)
                    self.root_node(2 * i)
                else:
                    self.swap(i, (2 * i) + 1)
                    self.min_heapify((2 * i) + 1)
    def getMin(self):
        min_value = self.Heap[self.root]
        self.Heap[self.root] = self.Heap[self.root]
        self.size-= 1
        self.root_node(self.root)
        return min_value
    def extractMin(self):
        data=self.Heap[1]
        self.Heap[1]=self.Heap[self.size-1]
        self.size-=1
        return data
    def main(self):
       for i in range(1, (self.heap_size//2)+1):
            print("Parent Node:",str(self.Heap[i]),"Left Node:"+str(self.Heap[2 * i]),"Right Node:",str(self.Heap[2 * i + 1]))
MinHeap = Minheap(34)
MinHeap.insert(7)
MinHeap.insert(21)
MinHeap.insert(18)
MinHeap.insert(35)
MinHeap.insert(56)
MinHeap.insert(39)
MinHeap.insert(63)
MinHeap.insert(45)
MinHeap.insert(100)
MinHeap.insert(3)
print("The Root element is :" ,(MinHeap.getMin()))
MinHeap.main()
print("Remove node :", MinHeap.extractMin())
MinHeap.main()
#Output-
#The Root element is : 3
#Parent Node: 3 Left Node:7 Right Node: 18
#Parent Node: 7 Left Node:35 Right Node: 21
#Parent Node: 18 Left Node:39 Right Node: 63
#Parent Node: 35 Left Node:45 Right Node: 100
#Parent Node: 21 Left Node:56 Right Node: 0
#Remove node : 3
#Parent Node: 0 Left Node:7 Right Node: 18
#Parent Node: 7 Left Node:35 Right Node: 21
#Parent Node: 18 Left Node:39 Right Node: 63
#Parent Node: 35 Left Node:45 Right Node: 100
#Parent Node: 21 Left Node:56 Right Node: 0
