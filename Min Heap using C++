//Min Heap
//Minimum Heap is a method of arranging elements in a binary search tree
//where value of the parent node is lesser than that of it's child nodes.
#include<iostream>
using namespace std;
class heap
{
    int *element;
    int count;
public:
heap(int size)
{
    element=new int[size];
    count=0;
    
}
void swap(int a,int b)
{
    int temp;
    temp=element[a];
    element[a]=element[b];
    element[b]=temp;
}
void heapup(int root,int bottom)
{
    if(bottom>root)
    {
        int parent=(bottom-1)/2;
        if(element[parent]>element[bottom])
        {
            swap(parent,bottom);
            heapup(root,parent);
        }
    }
}
void enqueue(int a)
{
    element[count]=a;
    heapup(0,count);
    count++;
}
void heapdown(int root,int bottom)
{
    int min,leftchild,rightchild;
    rightchild=(2*root)+2;
    leftchild=(2*root)+1;
    if(leftchild<=bottom)
    {
        if(leftchild==bottom)
        {
            min=leftchild;
        }
        else
        {
            if(element[leftchild]>=element[rightchild])
            {
                min=rightchild;
            }
            else
            {
                min=leftchild;
            }
            if(element[root]>element[min])
            {
                swap(root,min);
                heapdown(min,bottom);
                
            }
        }
    }
}
void dequeue()
{
    count--;
    element[0]=element[count];
    heapdown(0,count);
}
void show()
{
    for(int i=0;i<count;i++)
    {
        cout<<element[i]<<" ";
    }
}
};
int main()
{
    heap h1(20);
    h1.enqueue(10);
    h1.enqueue(5);
    h1.enqueue(20);
    h1.enqueue(7);
    h1.enqueue(12);
    h1.enqueue(9);
    h1.enqueue(7);
    h1.enqueue(21);
    h1.enqueue(19);
    h1.show();
    h1.dequeue();
    cout<<"\nShow:\n";
    h1.show();
}
//Output-
//5 7 7 10 12 20 9 21 19 
//Show:
//7 7 9 10 12 20 19 21 
