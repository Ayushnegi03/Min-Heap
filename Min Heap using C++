//Min Heap
//Minimum Heap is a method of arranging elements in a binary search tree
//where value of the parent node is lesser than that of it's child nodes.
#include <iostream>
#include <vector>
using namespace std;
void swap(int *a, int *b)
{
  int t = *b;
  *b = *a;
  *a = t;
}
void heap(vector<int> &hT, int i)
{
  int Size = hT.size();
  int Large = i;
  int L = 2 * i + 1;
  int R = 2 * i + 2;
  if (L < Size && hT[L] > hT[Large])
    Large = L;
  if (R < Size && hT[R] > hT[Large])
    Large = R;

  if (Large != i)
  {
    swap(&hT[i], &hT[Large]);
    heap(hT, Large);
  }
}
void insert(vector<int> &hT, int Num)
{
  int Size = hT.size();
  if (Size == 0)
  {
    hT.push_back(Num);
  }
  else
  {
    hT.push_back(Num);
    for (int i = (Size / 2) - 1; i >=0; i--)
    {
      heap(hT, i);
    }
  }
}
void PrintArray(vector<int> &hT)
{
  for (int i =  hT.size()-1; i >=0; --i)
    cout << hT[i] << " ";
  cout << "\n";
}
int main()
{
  vector<int> Heap;
  
 
  insert(Heap, 9);
  insert(Heap, 5);
  insert(Heap, 6);
  
  insert(Heap, 4);
  insert(Heap, 14);
  insert(Heap, 7);
  insert(Heap, 25);
  insert(Heap, 2);
  insert(Heap, 3);
  insert(Heap, 1);
  
  cout << "Min-Heap array: ";
  PrintArray(Heap);
}
//Output-
//Min Heap array: 1 3 2 6 7 5 4 14 9 25
