
function Heap()
{
  let list = [];
  this.minHeapify = (Arr, N, i) => {
    let Smallest = i;
    let L = 2 * i + 1;
    let R = 2 * i + 2; 
     if (L < N && Arr[L] < Arr[Smallest]) {
           Smallest = L; 
     }
     if (R < N && Arr[R] < Arr[Smallest]) {
          Smallest = R; 
     }
     if (Smallest != i) { 
          let temp = Arr[i]; 
          Arr[i] = Arr[Smallest]; 
          Arr[Smallest] = temp; 
        this.minHeapify(Arr, N, Smallest); 
      } 
  }
  this.insert = (Num) => {
    const Size = list.length;
    if(Size === 0){
      list.push(Num);
    }else{
      list.push(Num);
      for (let i = parseInt(list.length / 2 - 1); i >= 0; i--) {
         this.minHeapify(list, list.length, i); 
      }
    }
  }
  this.delete = (Num) => {
    const Size = list.length;
    let i;
    for(i = 0; i < Size; i++){
      if(list[i] === Num){
        break;
      }
    }
    [list[i], list[Size - 1]] = [list[Size - 1], list[i]];
    list.splice(Size - 1);
    for (let i = parseInt(list.length / 2 - 1); i >= 0; i--) {
         this.minHeapify(list, list.length, i); 
     }
  }
  this.findMin = () => list[0];
  this.deleteMin = () => {
    this.delete(list[0]);
  }
  this.extractMin = () => {
    const Min = list[0];
    this.delete(Min);
    return Min;
  }
  
  //Size
  this.Size = () => list.length;
  
  //IsEmpty
  this.isEmpty = () => list.length === 0;
  
  //Return head
  this.getList = () => list;
}
const heap = new Heap();
heap.insert(3);
heap.insert(4);
heap.insert(9);
heap.insert(5);
heap.insert(2);
heap.insert(10);
heap.insert(7);
heap.insert(14);
heap.insert(1);

console.log("Here is a Min-Heap")
console.log(heap.getList());
//Output-
//Here is a Min-Heap
//[ 1, 2, 7, 3, 4, 10, 9, 14, 5 ]
